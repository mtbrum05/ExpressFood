<?php

namespace SwaggerCustom\Test\TestCase\Lib\Operation;

use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;
use SwaggerCustom\Lib\Route\RouteScanner;
use SwaggerCustom\Lib\Configuration;
use SwaggerCustom\Lib\Factory\SwaggerFactory;
use SwaggerCustom\Lib\OpenApi\Operation;
use SwaggerCustom\Lib\Operation\OperationFromRouteFactory;

class OperationFromRouteFactoryTest extends TestCase
{
    public $fixtures = [
        'plugin.SwaggerCustom.Employees',
    ];

    private $router;
    private $config;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'only' => ['index','update']
            ]);
        });
        $this->router = $router;

        $this->config = [
            'prefix' => '/',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerCustomTest\App\\'],
                'entities' => ['\SwaggerCustomTest\App\\'],
                'tables' => ['\SwaggerCustomTest\App\\'],
            ]
        ];
    }

    public function testCreate()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $swagger = (new SwaggerFactory($config))->create();
        $cakeRoute = new RouteScanner($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $route = reset($routes);

        $operation = (new OperationFromRouteFactory($swagger))->create($routes['employees:index'], 'GET', null);

        $this->assertInstanceOf(Operation::class, $operation);
        $this->assertEquals('GET', $operation->getHttpMethod());
        $this->assertEquals('employees:index:get', $operation->getOperationId());
        $this->assertEquals('CustomTag', $operation->getTags()[1]);
    }

    /**
     * Tests `@SwagOperation(showPut=true)`
     */
    public function testShowPut()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $swagger = (new SwaggerFactory($config))->create();
        $cakeRoute = new RouteScanner($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $operation = (new OperationFromRouteFactory($swagger))->create($routes['employees:edit'], 'PUT', null);

        $this->assertInstanceOf(Operation::class, $operation);
        $this->assertEquals('PUT', $operation->getHttpMethod());
        $this->assertEquals('employees:edit:put', $operation->getOperationId());
    }
}